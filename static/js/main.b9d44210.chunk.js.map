{"version":3,"sources":["components/layout/SignedInLinks.js","store/actions/authActions.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/posts/PostSummary.js","components/posts/CreatePost.js","store/actions/postActions.js","components/posts/PostList.js","components/dashboard/Dashboard.js","components/auth/Register.js","components/auth/Login.js","App.js","reportWebVitals.js","store/reducers/postReducer.js","store/reducers/authReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","logoutAction","getState","getFirebase","auth","signOut","then","type","props","className","href","onClick","id","SignedOutLinks","to","state","firebase","links","uid","data-target","isLoaded","PostSummary","post","postContent","postedBy","postedAt","toDate","toString","CreatePost","handleChange","e","setState","target","value","handleSubmit","preventDefault","addPostAction","onSubmit","this","onChange","Component","firestore","getFirestore","profile","collection","add","firstName","lastName","postedById","Date","catch","error","PostList","posts","map","Dashboard","compose","ordered","firestoreConnect","orderBy","Register","email","password","registerAction","authError","htmlFor","newUser","createUserWithEmailAndPassword","resp","doc","user","set","initials","accountCreated","Login","loginAction","credentials","signInWithEmailAndPassword","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initState","postReducer","action","console","log","authReducer","message","rootReducer","combineReducers","firebaseReducer","firestoreReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","rrfProps","config","userProfile","useFirestoreForProfile","createFirestoreInstance","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9d44210.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { logoutAction } from '../../store/actions/authActions';\r\n\r\n//component is a function, so must pass props as an argument\r\nconst SignedInLinks = (props) => {\r\n    return (\r\n        <div>\r\n            <ul className=\"right hide-on-med-and-down\">\r\n                <li><a href=\"# \" onClick={props.logoutAction}>Logout</a></li>\r\n            </ul>\r\n            <ul className=\"sidenav\" id=\"mobile-menu\">\r\n                <li><a href=\"# \" onClick={props.logoutAction}>Logout</a></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        //calls logoutAction when user click log out button in navbar\r\n        logoutAction: () => dispatch(logoutAction())\r\n    }\r\n}\r\n\r\n//first argument is normally mapState...\r\n//if there is no state to map, first argument is null\r\nexport default connect(null, mapDispatchToProps)(SignedInLinks);","//function called at account register\r\n//returns newUser with account details\r\nexport const registerAction = (newUser) => {\r\n    return (dispatch, getState, { getFirebase }) => {\r\n        //COMMENT\r\n        const firebase = getFirebase();\r\n        const firestore = getFirebase().firestore();\r\n\r\n        //cretase a user and generates an id for them\r\n        firebase.auth().createUserWithEmailAndPassword(\r\n            newUser.email,\r\n            newUser.password,\r\n        ).then((resp) => {\r\n            //grabs user id from above and sets values under that id in users collection\r\n            return firestore.collection('users').doc(resp.user.uid).set({\r\n                email: newUser.email,\r\n                firstName: newUser.firstName,\r\n                lastName: newUser.lastName,\r\n                initials: newUser.firstName[0] + newUser.lastName[0],\r\n                accountCreated: new Date(),\r\n            })\r\n        }).then(() => {\r\n            dispatch({ type: 'REGISTER_SUCCESS' })\r\n        }).catch(error => {\r\n            dispatch({ type: 'REGISTER_ERROR', error })\r\n        })\r\n    }\r\n}\r\n\r\n//function called at login\r\n//returns credentials used to authenticate user\r\nexport const loginAction = (credentials) => {\r\n    return (dispatch, getState, { getFirebase }) => {\r\n        //COMMENT\r\n        const firebase = getFirebase();\r\n\r\n        firebase.auth().signInWithEmailAndPassword(\r\n            credentials.email,\r\n            credentials.password,\r\n        ).then(() => {\r\n            dispatch({ type: 'LOGIN_SUCCESS' })\r\n        }).catch((error) => {\r\n            dispatch({ type: 'LOGIN_ERROR', error })\r\n        })\r\n    }\r\n}\r\n\r\n//function called at logout\r\nexport const logoutAction = () => {\r\n    return (dispatch, getState, { getFirebase }) => {\r\n        //COMMENT\r\n        const firebase = getFirebase();\r\n\r\n        firebase.auth().signOut().then(() => {\r\n            dispatch({ type: 'LOGOUT_SUCCESS' })\r\n        })\r\n    }\r\n}","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst SignedOutLinks = () => {\r\n    return (\r\n        <div>\r\n            <ul className=\"right hide-on-med-and-down\">\r\n                <li><NavLink to='/register'>Register</NavLink></li>\r\n                <li><NavLink to='/login'>Login</NavLink></li>\r\n            </ul>\r\n            <ul className=\"sidenav\" id=\"mobile-menu\">\r\n                <li><a href=\"/register\">Register</a></li>\r\n                <li><a href=\"/login\">Login</a></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignedOutLinks;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { isLoaded } from 'react-redux-firebase';\r\n\r\nimport SignedInLinks from './SignedInLinks';\r\nimport SignedOutLinks from './SignedOutLinks';\r\n\r\n\r\n//BUG - MOBILE SIDEBAR DOESN'T WORK\r\n\r\n\r\n//component is a function, so must pass props as an argument\r\n//this. is not needed\r\nconst Navbar = (props) => {\r\n    //destructs auth property from mapStateToProps\r\n    const { auth } = props;\r\n\r\n    //returns different component dependant on existence of user id (i.e if user is logged in)\r\n    const links = auth.uid ? <SignedInLinks /> : <SignedOutLinks />\r\n\r\n    return (\r\n        <nav className=\"nav-wrapper teal darken-3\">\r\n            <div className=\"container\">\r\n                <Link to='/' className=\"brand-logo\">MessageMe!</Link>\r\n                <Link to=\"#\" className=\"sidenav-trigger right\" data-target=\"mobile-menu\">\r\n                    <i className=\"material-icons\">menu</i>\r\n                </Link>\r\n                {isLoaded(auth) && links}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        //stores state.firebase(rootReducer).auth(auth-status?) on auth property\r\n        auth: state.firebase.auth,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Navbar);","import React from 'react';\r\n\r\n//destructs post prop from PostList.js\r\n//kay-value data passed all way down from postReducer.js\r\nconst PostSummary = ({post}) => {\r\n    return (\r\n        <div className=\"card z-depth-0 post-list\">\r\n            <div className=\"card-content grey-text text-darken-3\">\r\n                <span className=\"card-title\">{ post.postContent }</span>\r\n                <p>Created by { post.postedBy }</p>\r\n                <p>{ post.postedAt.toDate().toString() }</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostSummary;","import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { addPostAction } from '../../store/actions/postActions';\r\n\r\nclass CreatePost extends Component {\r\n    state = {\r\n        postContent: '',\r\n    }\r\n\r\n    //function grabs input value via form id\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    //calls function from mapDispatchToProps\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addPostAction(this.state);\r\n        this.setState({\r\n            postContent: '',\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"center\">\r\n                <form onSubmit={this.handleSubmit} className=\"white\">\r\n                    <textarea id=\"postContent\" className=\"materialize-textarea\" onChange={this.handleChange} value={this.state.postContent}></textarea>\r\n                    <button className=\"btn pink lighten-2 z-depth-0\">Add post</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPostAction: (post) => dispatch(addPostAction(post))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(CreatePost);","export const addPostAction = (post) => {\r\n    return (dispatch, getState, { getFirestore }) => {\r\n        const firestore = getFirestore();\r\n        const profile = getState().firebase.profile;\r\n        const id = getState().firebase.auth.uid;\r\n\r\n        firestore.collection('posts').add({\r\n            ...post,\r\n            postedBy: profile.firstName + ' ' + profile.lastName,\r\n            postedById: id,\r\n            postedAt: new Date(),\r\n        }).then(() => {\r\n            dispatch({ type: 'ADD_POST', post });\r\n        }).catch((error) => {\r\n            dispatch({ type: 'ADD_POST_ERROR', error });\r\n        })\r\n    }\r\n}","import React from 'react';\r\n\r\nimport PostSummary from './PostSummary';\r\nimport CreatePost from '../posts/CreatePost';\r\n\r\n//destructs posts prop from Dashboard.js\r\nconst PostList = ({posts}) => {\r\n    return (\r\n        <div className=\"post-list section\">\r\n            <CreatePost />\r\n            {/* checks that posts exist and then maps posts */}\r\n            {/* maps each state object to board and passes to PostSummary.js */}\r\n            { posts && posts.map(post => {\r\n                return (\r\n                    <PostSummary post={post} key={post.id} /> \r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostList;","import React, { Component } from 'react';\r\n\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { firestoreConnect, isLoaded } from 'react-redux-firebase';\r\n\r\nimport PostList from '../posts/PostList';\r\n\r\nclass Dashboard extends Component {\r\n    render() {\r\n        /*\r\n        destructs posts property from mapStateToProps\r\n        equivalent to const posts = this.props.posts;\r\n        posts is passed down as a prop to PostList component\r\n        */\r\n        const { auth, posts } = this.props;\r\n\r\n        //pause render and checks auth status &\r\n        //then if user is not logged in, redirect to login\r\n        if (isLoaded(auth) && !auth.uid) return <Redirect to='/login' />\r\n\r\n        return (\r\n            <div className=\"dashboard container\">\r\n                <PostList posts={posts} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        //stores state.firebase(rootReducer).auth(auth-status?) on auth property\r\n        auth: state.firebase.auth,\r\n        //stores state.firestore(rootReducer).postedAt.desc.collection on posts prop\r\n        posts: state.firestore.ordered.posts,\r\n    }\r\n}\r\n\r\n/*\r\npasses map... function to connect\r\nconnects store data with component\r\nfirestoreConnects to appropriate collection on Dashboard.js load\r\n*/\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect([\r\n        { collection: 'posts', orderBy: ['postedAt', 'desc']},\r\n    ])\r\n)(Dashboard);","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { registerAction } from '../../store/actions/authActions';\r\n\r\nclass Register extends Component {\r\n    //initialise form state\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        firstName: '',\r\n        lastName: '',\r\n    }\r\n\r\n    //function grabs input value via form id\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //calls registerAction from mapDispatchToProps\r\n        this.props.registerAction(this.state);\r\n    }\r\n\r\n    render() {\r\n        //destructs auth, authError properties from mapStateToProps\r\n        //equivalent to const auth = this.props.auth; &\r\n        //equivalent to const authError = this.props.authError;\r\n        const { auth, authError } = this.props;\r\n\r\n        //if user id exists (i.e if user is logged in) redirect to home\r\n        if (auth.uid) return <Redirect to='/' />\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <form onSubmit={this.handleSubmit} className=\"white\">\r\n                    <h5 className=\"grey-text text-darken-3\">Register</h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange} />\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange} />\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                        <input type=\"text\" id=\"firstName\" onChange={this.handleChange} />\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"lastName\">Last Name</label>\r\n                        <input type=\"text\" id=\"lastName\" onChange={this.handleChange} />\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn indigo z-depth-0\">Register</button>\r\n                        <div className=\"red-text center\">\r\n                            { authError ? <p>{ authError }</p> : null }\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        //stores state.firebase(rootReducer).auth(auth-status?) on auth property\r\n        auth: state.firebase.auth,\r\n        //stores state.auth(rootReducer).authError(authReducer) on authError property\r\n        authError: state.auth.authError,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        //returns registerAction with newUser details attached\r\n        registerAction: (newUser) => dispatch(registerAction(newUser))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { loginAction } from '../../store/actions/authActions';\r\n\r\nclass Login extends Component {\r\n    //initialise form state\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n    }\r\n\r\n    //function grabs input value via form id\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //calls loginAction from mapDispatchToProps\r\n        this.props.loginAction(this.state);\r\n    }\r\n\r\n    render() {\r\n        //destructs auth, authError properties from mapStateToProps\r\n        //equivalent to const auth = this.props.auth; &\r\n        //equivalent to const authError = this.props.authError;\r\n        const { auth, authError } = this.props;\r\n\r\n        //if user id exists (i.e if user is logged in) redirect to home\r\n        if (auth.uid) return <Redirect to='/' />\r\n        \r\n        return (\r\n            <div className=\"container\">\r\n                <form onSubmit={this.handleSubmit} className=\"white\">\r\n                    <h5 className=\"grey-text text-darken-3\">Login</h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange} />\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange} />\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn indigo z-depth-0\">Login</button>\r\n                        <div className=\"red-text center\">\r\n                        { authError ? <p>{ authError }</p> : null }\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        //stores state.firebase(rootReducer).auth(auth-status?) on auth property\r\n        auth: state.firebase.auth,\r\n        //stores state.auth(rootReducer).authError(authReducer) on authError property\r\n        authError: state.auth.authError,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        //returns loginAction with user credentials attached\r\n        loginAction: (credentials) => dispatch(loginAction(credentials))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React from 'react';\n\n//library handles routing\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport Navbar from './components/layout/Navbar';\nimport Dashboard from './components/dashboard/Dashboard';\nimport Register from './components/auth/Register';\nimport Login from './components/auth/Login';\n// import Footer from './components/layout/Footer';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={Dashboard} />\n          <Route path='/register' component={Register} />\n          <Route path='/login' component={Login} />\n        </Switch>\n        {/* <Footer /> */}\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initState = {\r\n    posts: []\r\n}\r\n\r\nconst postReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_POST':\r\n            console.log('ADD_POST', action.post);\r\n            return state;\r\n        case 'ADD_POST_ERROR':\r\n            console.log('ADD_POST_ERROR', action.error);\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default postReducer;","const initState = {\r\n    //initialise authError prop to null to avoid authentication errors on app load\r\n    authError: null\r\n}\r\n\r\n//function takes in initial state and action(.type, i.e 'REGISTER_SUCCESS')\r\n//returns the next state of the app following case\r\n//passed down to rootReducer\r\nconst authReducer = (state = initState, action) => {\r\n    switch(action.type){\r\n        case 'REGISTER_SUCCESS':\r\n            console.log('register success');\r\n            return {\r\n                ...state,\r\n                authError: null,\r\n            }\r\n\r\n        case 'REGISTER_ERROR':\r\n            console.log('register error');\r\n            return {\r\n                ...state,\r\n                authError: action.error.message,\r\n            }\r\n\r\n        case 'LOGIN_SUCCESS':\r\n            console.log('login success');\r\n            return {\r\n                ...state,\r\n                authError: null,\r\n            }\r\n\r\n        case 'LOGIN_ERROR':\r\n            console.log('login error');\r\n            return {\r\n                ...state,\r\n                authError: action.error.message,\r\n            }\r\n\r\n        case 'LOGOUT_SUCCESS':\r\n            console.log('logout success');\r\n            return state;\r\n\r\n        //default runs on app load\r\n        //simply returns initial state    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;","import { combineReducers } from 'redux';\r\nimport { firebaseReducer } from 'react-redux-firebase';\r\nimport { firestoreReducer } from 'redux-firestore';\r\n\r\nimport postReducer from './postReducer';\r\nimport authReducer from './authReducer';\r\n\r\n//stores functions (i.e boardReducer) on state (i.e board)\r\n//state is passed to index.js via rootReducer for global use\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    post: postReducer,\r\n    //syncs auth status\r\n    firebase: firebaseReducer,\r\n    //store data from firestore on firestore property\r\n    firestore: firestoreReducer,\r\n})\r\n\r\nexport default rootReducer;","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyAo_4-bdLFcoq31O0o-XorzDWHyythV3R0\",\r\n    authDomain: \"messageme-f5a0b.firebaseapp.com\",\r\n    databaseURL: \"https://messageme-f5a0b.firebaseio.com\",\r\n    projectId: \"messageme-f5a0b\",\r\n    storageBucket: \"messageme-f5a0b.appspot.com\",\r\n    messagingSenderId: \"170724100537\",\r\n    appId: \"1:170724100537:web:7c724a0b0763e864990e68\",\r\n    measurementId: \"G-G6Y43LQQE1\"\r\n  };\r\n  \r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { getFirebase, ReactReduxFirebaseProvider } from 'react-redux-firebase';\nimport { createFirestoreInstance, getFirestore, reduxFirestore } from 'redux-firestore';\n\nimport rootReducer from './store/reducers/rootReducer';\n\nimport 'firebase/firestore';\nimport firebase from './config/fbConfig';\n\n//imports global state into the root level\n//thunk provides custom middleware to allow async actions\nconst store = createStore(rootReducer, compose(\n  applyMiddleware(thunk.withExtraArgument({\n    getFirebase, getFirestore\n  })),\n  reduxFirestore(firebase),\n));\n\n//LOOK INTO\nconst rrfConfig = {\n  userProfile: 'users',\n  useFirestoreForProfile: true,\n}\n\n//LOOK INTO\nconst rrfProps = {\n  firebase,\n  config: rrfConfig,\n  dispatch: store.dispatch,\n  createFirestoreInstance,\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ReactReduxFirebaseProvider {...rrfProps}>\n        <App />\n      </ReactReduxFirebaseProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}